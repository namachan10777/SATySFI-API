@import: ../packages/satysfi-api

open Type in

document (|
  title = {コード};
  style-sheet = `main.css`;
|) '<
  +top{module Code: sig end}<
    +p{ソースコードを載せるときに使う関数とコマンドを提供します。}
    +p{code.satyhによって提供され、\code(`@require: code`);とすると使うことができます。}

    +section {コマンド}<
      +direct (`+code`) (`[string] block-cmd`) <
      >

      +direct (`+console`) (`[string] block-cmd`) <>

      +direct (`\code`) (`[string] inline-cmd`) <>

      +direct (`\console`) (`[string] inline-cmd`) <>

      +direct (`\d-code`) (`[string] inline-cmd`) <>
    >
    +section {作成用関数}<
      +val (`scheme`) (tDECOSET --> tCLR --> tCTX --> tS --> tBB) <
        +p{コードを表示する部分の装飾、文字色、context、コードをそれぞれ与えることでソースコードが
        組まれた\type(`block-boxes`);を得ることができます。}
      >
    >
  >

  +top{module Code2: sig end}<
    +p{ソースコードを載せるときに使う関数とコマンドを提供します。}
    +p{\href(`https://github.com/nyuichi/satysfi-lib`){satysfi-lib}/typeset/code2.satyhによって提供されます。}

    +section {コマンド}<
      +direct (`+code`) (`[syntax-def?; string] block-cmd`) <
      >

      +direct (`+console`) (`[syntax-def?; string] block-cmd`) <>

      +direct (`\code`) (`[string] inline-cmd`) <>

      +direct (`\console`) (`[syntax-def?; string] inline-cmd`) <>

      +direct (`\d-code`) (`[syntax-def?; string] inline-cmd`) <>
    >
    +section {作成用関数}<
      +type (`syntax-def`) (tREC[(`groups`, tL(tREC[(`color`, tCLR); (`keywords`, tL(tS))])); (`ident-regexp`, tMake(`RegExp.t`))])<
        +p{ソースコードのシンタックスハイライトを決めるための型です。}
      >
      +val (`scheme`) (tDECOSET --> tCLR --> tCTX --> tOPT (tMake(`syntax-def`) --> tS --> tBB)) <
        +p{コードを表示する部分の装飾、文字色、context、シンタックスハイライト、コード
        をそれぞれ与えることでソースコードが
        組まれた\type(`block-boxes`);を得ることができます。}
      >
    >
  >
>
